{"version":3,"sources":["UI/context/index.js","UI/view/pages/error/404.jsx","App.js","serviceWorker.js","UI/view/pages/error/generalerror.jsx","helpers/errorboundary/index.jsx","helpers/errorReport/index.js","UI/constants/index.js","UI/constants/siteColors/index.js","index.js"],"names":["StyleContext","createContext","StyleProvider","Provider","StyleConsumer","Consumer","Styling","styled","div","props","black","white","PageNotFound","useState","count","setCount","history","useHistory","useEffect","counter","setTimeout","push","clearTimeout","siteColors","className","style","margin","textAlign","to","HomePage","lazy","AboutPage","ContactPage","WorksPage","App","fallback","exact","path","component","Boolean","window","location","hostname","match","GeneralError","message","ErrorBoundary","state","hasError","error","errorInfo","console","log","logErrorToMyService","this","children","React","Component","Constant","ReactDOM","render","StrictMode","value","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"yHAAA,+EAEMA,EAAeC,wBAAc,MACtBC,EAAgBF,EAAaG,SAC7BC,EAAgBJ,EAAaK,U,m9BCE1C,IAuCMC,E,MAAUC,EAAOC,IAAV,KA6BS,SAAAC,GAAK,OAAEA,EAAMC,SACnB,SAAAD,GAAK,OAAEA,EAAME,SAQdC,EA7EM,WAAO,IAAD,EACGC,mBAAS,GADZ,mBAChBC,EADgB,KACTC,EADS,KAEjBC,EAAUC,cAehB,OAZAC,qBAAU,WACN,IAAIC,EAAUC,YAAW,WAErBN,EAAQ,EAAIC,EAASD,EAAQ,GAAKE,EAAQK,KAAK,OAEhD,KAEH,OAAO,WACHC,aAAaH,MAElB,CAACL,EAAOE,IAGP,kBAAC,IAAD,MAEQ,gBAAEO,EAAF,EAAEA,WAAF,OACI,kBAACjB,EAAYiB,EACT,yBAAKC,UAAW,QAASC,MAAO,CAACC,OAAQ,OAAQC,UAAW,WACxD,8BACI,kCACA,6CACA,gFAEJ,gCAAQ,kBAAC,IAAD,CAAMC,GAAI,KAAV,YAER,yEAA+Cd,SC/BrEe,EAAWC,gBAAK,kBAAM,sDACtBC,EAAYD,gBAAK,kBAAM,gCACvBE,EAAcF,gBAAK,kBAAM,gCACzBG,EAAYH,gBAAK,kBAAM,gCAmBdI,MAhBf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUC,SAAU,+CAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAWT,IACnC,kBAAC,IAAD,CAAOQ,KAAM,SAAUC,UAAWP,IAClC,kBAAC,IAAD,CAAOM,KAAM,WAAYC,UAAWN,IACpC,kBAAC,IAAD,CAAOK,KAAM,SAAUC,UAAWL,IAClC,kBAAC,IAAD,CAAOI,KAAM,IAAKC,UAAW1B,QCR7B2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCCRSC,EARM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OACI,6BACKA,GAAoB,aC2BlBC,E,kDA1BX,WAAYrC,GAAQ,IAAD,8BACf,cAAMA,IACDsC,MAAQ,CAACC,UAAU,GAFT,E,8DAWDC,EAAOC,ICjBM,SAACD,EAAOC,GAEvCC,QAAQC,IAAI,iBAAkBH,GAC9BE,QAAQC,IAAI,eAAgBF,GDgBxBG,CAAoBJ,EAAOC,K,+BAI3B,OAAII,KAAKP,MAAMC,SAEJ,kBAAC,EAAD,MAGJM,KAAK7C,MAAM8C,Y,gDAhBUN,GAE5B,MAAO,CAACD,UAAU,O,GATEQ,IAAMC,WEHrBC,EAAW,CACpBnC,WCHsB,CACtBZ,MAAO,UACPD,MAAO,YCQXiD,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,KACI,kBAAC,IAAD,CAAeC,MAAOJ,GAClB,kBAAC,EAAD,SAIZK,SAASC,eAAe,SNiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtB,GACLE,QAAQF,MAAMA,EAAMJ,c","file":"static/js/main.a0fcfe2c.chunk.js","sourcesContent":["import {createContext} from \"react\";\r\n\r\nconst StyleContext = createContext(null);\r\nexport const StyleProvider = StyleContext.Provider;\r\nexport const StyleConsumer = StyleContext.Consumer;","import React, {useEffect, useState} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {StyleConsumer} from \"../../../context\";\r\nimport styled from \"styled-components\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst PageNotFound = () => {\r\n    const [count, setCount] = useState(5);\r\n    const history = useHistory();\r\n    \r\n    \r\n    useEffect(() => {\r\n        let counter = setTimeout(() => {\r\n            // on mail success\r\n            count > 1 ? setCount(count - 1) : history.push('/');\r\n\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearTimeout(counter)\r\n        }\r\n    }, [count, history]);\r\n    \r\n    return (\r\n        <StyleConsumer>\r\n            {\r\n                ({siteColors}) => (\r\n                    <Styling {...siteColors}>\r\n                        <div className={'error'} style={{margin: 'auto', textAlign: 'center'}}>\r\n                            <span>\r\n                                <p>404</p>\r\n                                <p>page not found</p>\r\n                                <p>The page you are trying to access does not exist</p>\r\n                            </span>\r\n                            <button><Link to={'/'}>go back</Link></button>\r\n                            \r\n                            <p>You will be redirected to the home page in {count}</p>\r\n                        </div>\r\n                    </Styling>\r\n                )\r\n            }\r\n        </StyleConsumer>\r\n    );\r\n};\r\n\r\nconst Styling = styled.div`\r\ndisplay: flex;\r\nheight: 100vh;\r\njustify-content: center;\r\nalign-items: center;\r\n\r\n\r\n.error {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n    height: 100%;\r\n    align-items: center;\r\n    \r\n    p{\r\n        :nth-child(1) {\r\n            font-family: Inter;\r\n            font-size: 10rem;\r\n            font-weight: 700;\r\n        }\r\n        :nth-child(2) {\r\n            text-transform: uppercase;\r\n            font-size: 2rem;\r\n            font-weight: 600;\r\n        }\r\n    }\r\n    button {\r\n        padding: 0.6rem 2rem;\r\n        border: none;\r\n        background: ${props=>props.black};\r\n        color:${props=>props.white};\r\n        text-transform: uppercase;\r\n        max-width: 138px;\r\n    }\r\n}\r\n\r\n`;\r\n\r\nexport default PageNotFound;","import React, {lazy, Suspense} from 'react';\r\nimport './styles/App.css';\r\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\r\nimport PageNotFound from \"./UI/view/pages/error/404\";\r\n\r\nconst HomePage = lazy(() => import('./UI/view/pages/home'));\r\nconst AboutPage = lazy(() => import('./UI/view/pages/about'));\r\nconst ContactPage = lazy(() => import('./UI/view/pages/contact'));\r\nconst WorksPage = lazy(() => import('./UI/view/pages/works'));\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Suspense fallback={<div>'loading ...'</div>}>\r\n                <Switch>\r\n                    <Route exact path={'/'} component={HomePage}/>\r\n                    <Route path={'/about'} component={AboutPage}/>\r\n                    <Route path={'/contact'} component={ContactPage}/>\r\n                    <Route path={'/works'} component={WorksPage}/>\r\n                    <Route path={'*'} component={PageNotFound}/>\r\n                </Switch>\r\n            </Suspense>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst GeneralError = ({message}) => {\r\n    return (\r\n        <div>\r\n            {message ? message : 'Uh oh...'}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GeneralError;","import React from \"react\";\r\nimport GeneralError from \"../../UI/view/pages/error/generalerror\";\r\nimport {logErrorToMyService} from \"../errorReport\";\r\n\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {hasError: false};\r\n    }\r\n    \r\n    \r\n    static getDerivedStateFromError(error) {\r\n        // Update state so the next render will show the fallback UI.\r\n        return {hasError: true};\r\n    }\r\n    \r\n    componentDidCatch(error, errorInfo) {\r\n        // You can also log the error to an error reporting service\r\n        logErrorToMyService(error, errorInfo);\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <GeneralError/>\r\n        }\r\n        \r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export const logErrorToMyService = (error, errorInfo) => {\r\n    \r\n    console.log('caught error: ', error)\r\n    console.log('error info: ', errorInfo)\r\n\r\n};","import {siteColors} from \"./siteColors\";\r\n\r\nexport const Constant = {\r\n    siteColors,\r\n};","export const siteColors = {\r\n    white: '#f7f7f7',\r\n    black: '#1a1a1a',\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ErrorBoundary from \"./helpers/errorboundary\";\r\nimport {StyleProvider} from \"./UI/context\";\r\nimport {Constant} from \"./UI/constants\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ErrorBoundary>\r\n            <StyleProvider value={Constant}>\r\n                <App/>\r\n            </StyleProvider>\r\n        </ErrorBoundary>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}